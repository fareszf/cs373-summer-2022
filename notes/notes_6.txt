Python iterables must implement one special methods, __iter__(). 
the "__iter__" magic function is called, for example, 
when a for-loop starts or run a function like list.

Python iterator object must implement two special methods, 
__iter__() and __next__().

An object is called iterable if we can get an iterator from it. 
Most of built-in containers in Python like: list, tuple, string 
etc. are iterables.

The iter() function (which in turn calls the __iter__() method) 
returns an iterator from them.


-------------

Range and RangeIterator: 
------------------------
In RangeIteratorT we see that range_iterator_class and 
range_iterator_function are imported meaning we 
can implement the rangeIterator functionality in 
both a class and a function.
 
In RangeT we see that range_1, and range_2 are imported. 
More importantly on lines 50-51 list() is called twice 
and we get a new iterator both times! This logic can't be 
done in a function, meaning we need to make a class that responds to __iter__().

 
Range_2:
-------
Range_2 in Range.py is trying to implement a range function that is not exhaustible. 
This is can be easily achieved by not updating the instance variables b and e.
Instead you create two local variables and update them. Doing this, will keep the 
original b and e as they were when the object was initially created, and therefore,
each time you list the object, you get the same sequence of numbers (i.e., not exhaustibale).

Note that a range object is an iterable but not iterator
>>> x = range(4)
>>> hasattr(x, "__iter__")
True
>>> hasattr(x, "__next__")
False
>>> 

Range_1:
-------
Range_1 in Range.py accomplishes the same outcome of Range_2 but using inner classes.
Inner class is a class that is defined inside another class. 
Whenever you create an object of Range_1, you need to pass two variables, namely b and e.
Afterward, whenever you try to navigate this object, You'll get an 
instance of the inner class with the original variable values. 
------

Note:
#Given an iterable, x, using "if x" does not work 
for user-defined iterables. 
# Example.
class iterable: 
      def __iter__(self): 
          return iter([])
          
x = iterable()
if x :
   print("full")
else :
   print("empty")
# full

def a_for (x) :
   for a in x :
      print("inside for")

def a_while (x) :
    p = iter(x)
    try :
        while True :
            w = next(p)
            print("inside while")
    except StopIteration :
        pass

x = iterable()
a_for(x)
a_while(x)
------------


FunctionKeywords.py
-------------------
Note 1: the specified "by name" arguments should have corresponds with the names 
in the function signature as parameters.
Note 2: In the functional call, when you mix "by position" and "by name" arguments, 
arguments passed "by position" should come first. 
Then the remainder by name (the order of the arguments passed by name does not matter)

FunctionDefaults.py
-------------------
In function definition, non-default arguments cannot follow default arguments.

Lines 35-39, test different function calls to h1. 
•	Line 35: call with nothing. no pass, x=[], add to it [2], result is [2].
•	Line 36, the default only happens once when the function is called first.
•	Line 37, passes in a list -- will add 2 to the list components.
•	Line 38, call with nothing, get another 2 added to the previously build list.
•	Line 39, passes in a list -- will add 2 to the list components.
Lines 43-45: Define the function h2 which set default to empty parameter (empty tuple). 
-- change default to immutable.
Lines 47-51, test different function calls to h2.
•	Line 47: call with nothing. no pass, x=(), create a new tuple, result is (2,).
•	Line 48, another call with nothing. no pass, x=(), create a new tuple, result is (2,).
•	.....
•	Recommendation: do not use mutables as defaults.
Mutable Function Default
if it is a must, default it to None and init an empty one later (if arg is None)

Lines 55-59: Define the function h3 which set default to None parameter (None = null in Java).
Lines 61-66, test different function calls to h3.

....
Note that in this example, we call the function h3() twice we get the same result, [2], 
not like h1(): we first received [2] and then received [2, 2]. Because the list in h1 was 
a default and it was constructed only once. But in h3 the list was not the default. 
It was inside the function as a local variable.


FunctionUnpacking.py
-------------------
ordering of unpacking (When calling a function and passing a parameter – 
by position, by variable name, or by unpacking):
- position must precede variable name. 
- variable name and unpacking (order does not matter): unpacking first, 
assign values of unpacking to parameters in order. Then, assign variables. 
Note that there might be name conflict for example
>>> def f (x, y, z) :
...     return [x, y, z]
...
>>> t = (3, 4)
>>>
>>> assert f(z = 2, *t) == [3, 4, 2]
>>> assert f(*t, z = 2) == [3, 4, 2]
>>> assert f(*t, x = 2) == [3, 4, 2]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: f() got multiple values for argument 'x'

>>> assert f(2, *t) == [2, 3, 4]
>>> assert f(*t, 2) == [3, 4, 2]
>>>

FunctionTuple.py
----------------
Note that iterable packing opens the door for optional parameters.
- *t as an argument (in a function call) means unpacking
- *t as a parameter (in a function definition) in the function signature means packing

FunctionDict.py
- **t as an argument (in a function call) means unpacking
- **t as a parameter (in a function definition) in the function signature means packing

Rules above applies in addition to the following: * (unpacking iterable) must precede ** (unpacking dictionary).
Syntax: 
position should come before variable name
position should come before unpacking dict
unpacking iterable should come before unpacking dict

Semantic: {By position, unpacking iterable}, by variable name, unpacking dictionary.
